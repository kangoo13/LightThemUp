//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by jni4net. See http://jni4net.sourceforge.net/ 
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace openomr.fft {
    
    
    #region Component Designer generated code 
    [global::net.sf.jni4net.attributes.JavaClassAttribute()]
    public partial class FFT : global::java.lang.Object {
        
        internal new static global::java.lang.Class staticClass;
        
        internal static global::net.sf.jni4net.jni.MethodId j4n_getFFTImage0;
        
        internal static global::net.sf.jni4net.jni.MethodId j4n_getRotationAngle1;
        
        internal static global::net.sf.jni4net.jni.MethodId j4n_doFFT2;
        
        internal static global::net.sf.jni4net.jni.MethodId j4n__ctorFFT3;
        
        [global::net.sf.jni4net.attributes.JavaMethodAttribute("(Ljava/awt/image/BufferedImage;I)V")]
        public FFT(global::java.lang.Object par0, int par1) : 
                base(((global::net.sf.jni4net.jni.JNIEnv)(null))) {
            global::net.sf.jni4net.jni.JNIEnv @__env = global::net.sf.jni4net.jni.JNIEnv.ThreadEnv;
            using(new global::net.sf.jni4net.jni.LocalFrame(@__env, 14)){
            @__env.NewObject(global::openomr.fft.FFT.staticClass, global::openomr.fft.FFT.j4n__ctorFFT3, this, global::net.sf.jni4net.utils.Convertor.ParStrongCp2J(par0), global::net.sf.jni4net.utils.Convertor.ParPrimC2J(par1));
            }
        }
        
        protected FFT(global::net.sf.jni4net.jni.JNIEnv @__env) : 
                base(@__env) {
        }
        
        public static global::java.lang.Class _class {
            get {
                return global::openomr.fft.FFT.staticClass;
            }
        }
        
        private static void InitJNI(global::net.sf.jni4net.jni.JNIEnv @__env, java.lang.Class @__class) {
            global::openomr.fft.FFT.staticClass = @__class;
            global::openomr.fft.FFT.j4n_getFFTImage0 = @__env.GetMethodID(global::openomr.fft.FFT.staticClass, "getFFTImage", "()Ljava/awt/image/BufferedImage;");
            global::openomr.fft.FFT.j4n_getRotationAngle1 = @__env.GetMethodID(global::openomr.fft.FFT.staticClass, "getRotationAngle", "()D");
            global::openomr.fft.FFT.j4n_doFFT2 = @__env.GetMethodID(global::openomr.fft.FFT.staticClass, "doFFT", "()V");
            global::openomr.fft.FFT.j4n__ctorFFT3 = @__env.GetMethodID(global::openomr.fft.FFT.staticClass, "<init>", "(Ljava/awt/image/BufferedImage;I)V");
        }
        
        [global::net.sf.jni4net.attributes.JavaMethodAttribute("()Ljava/awt/image/BufferedImage;")]
        public virtual global::java.lang.Object getFFTImage() {
            global::net.sf.jni4net.jni.JNIEnv @__env = this.Env;
            using(new global::net.sf.jni4net.jni.LocalFrame(@__env, 10)){
            return global::net.sf.jni4net.utils.Convertor.StrongJ2Cp<global::java.lang.Object>(@__env, @__env.CallObjectMethodPtr(this, global::openomr.fft.FFT.j4n_getFFTImage0));
            }
        }
        
        [global::net.sf.jni4net.attributes.JavaMethodAttribute("()D")]
        public virtual double getRotationAngle() {
            global::net.sf.jni4net.jni.JNIEnv @__env = this.Env;
            using(new global::net.sf.jni4net.jni.LocalFrame(@__env, 10)){
            return ((double)(@__env.CallDoubleMethod(this, global::openomr.fft.FFT.j4n_getRotationAngle1)));
            }
        }
        
        [global::net.sf.jni4net.attributes.JavaMethodAttribute("()V")]
        public virtual void doFFT() {
            global::net.sf.jni4net.jni.JNIEnv @__env = this.Env;
            using(new global::net.sf.jni4net.jni.LocalFrame(@__env, 10)){
            @__env.CallVoidMethod(this, global::openomr.fft.FFT.j4n_doFFT2);
            }
        }
        
        new internal sealed class ContructionHelper : global::net.sf.jni4net.utils.IConstructionHelper {
            
            public global::net.sf.jni4net.jni.IJvmProxy CreateProxy(global::net.sf.jni4net.jni.JNIEnv @__env) {
                return new global::openomr.fft.FFT(@__env);
            }
        }
    }
    #endregion
}
