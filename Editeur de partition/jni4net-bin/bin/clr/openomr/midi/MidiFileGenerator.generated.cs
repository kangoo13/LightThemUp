//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by jni4net. See http://jni4net.sourceforge.net/ 
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace openomr.midi {
    
    
    #region Component Designer generated code 
    [global::net.sf.jni4net.attributes.JavaClassAttribute()]
    public partial class MidiFileGenerator : global::java.lang.Object {
        
        internal new static global::java.lang.Class staticClass;
        
        internal static global::net.sf.jni4net.jni.MethodId j4n_start0;
        
        internal static global::net.sf.jni4net.jni.MethodId j4n_getSequencer1;
        
        internal static global::net.sf.jni4net.jni.MethodId j4n_writeFile2;
        
        internal static global::net.sf.jni4net.jni.MethodId j4n_writeToString3;
        
        protected MidiFileGenerator(global::net.sf.jni4net.jni.JNIEnv @__env) : 
                base(@__env) {
        }
        
        public static global::java.lang.Class _class {
            get {
                return global::openomr.midi.MidiFileGenerator.staticClass;
            }
        }
        
        private static void InitJNI(global::net.sf.jni4net.jni.JNIEnv @__env, java.lang.Class @__class) {
            global::openomr.midi.MidiFileGenerator.staticClass = @__class;
            global::openomr.midi.MidiFileGenerator.j4n_start0 = @__env.GetMethodID(global::openomr.midi.MidiFileGenerator.staticClass, "start", "()V");
            global::openomr.midi.MidiFileGenerator.j4n_getSequencer1 = @__env.GetMethodID(global::openomr.midi.MidiFileGenerator.staticClass, "getSequencer", "()Ljavax/sound/midi/Sequencer;");
            global::openomr.midi.MidiFileGenerator.j4n_writeFile2 = @__env.GetMethodID(global::openomr.midi.MidiFileGenerator.staticClass, "writeFile", "(Ljava/io/File;)V");
            global::openomr.midi.MidiFileGenerator.j4n_writeToString3 = @__env.GetMethodID(global::openomr.midi.MidiFileGenerator.staticClass, "writeToString", "()[B");
        }
        
        [global::net.sf.jni4net.attributes.JavaMethodAttribute("()V")]
        public virtual void start() {
            global::net.sf.jni4net.jni.JNIEnv @__env = this.Env;
            using(new global::net.sf.jni4net.jni.LocalFrame(@__env, 10)){
            @__env.CallVoidMethod(this, global::openomr.midi.MidiFileGenerator.j4n_start0);
            }
        }
        
        [global::net.sf.jni4net.attributes.JavaMethodAttribute("()Ljavax/sound/midi/Sequencer;")]
        public virtual global::java.lang.Object getSequencer() {
            global::net.sf.jni4net.jni.JNIEnv @__env = this.Env;
            using(new global::net.sf.jni4net.jni.LocalFrame(@__env, 10)){
            return global::net.sf.jni4net.utils.Convertor.FullJ2C<global::java.lang.Object>(@__env, @__env.CallObjectMethodPtr(this, global::openomr.midi.MidiFileGenerator.j4n_getSequencer1));
            }
        }
        
        [global::net.sf.jni4net.attributes.JavaMethodAttribute("(Ljava/io/File;)V")]
        public virtual void writeFile(global::java.io.File par0) {
            global::net.sf.jni4net.jni.JNIEnv @__env = this.Env;
            using(new global::net.sf.jni4net.jni.LocalFrame(@__env, 12)){
            @__env.CallVoidMethod(this, global::openomr.midi.MidiFileGenerator.j4n_writeFile2, global::net.sf.jni4net.utils.Convertor.ParStrongCp2J(par0));
            }
        }
        
        [global::net.sf.jni4net.attributes.JavaMethodAttribute("()[B")]
        public virtual byte[] writeToString() {
            global::net.sf.jni4net.jni.JNIEnv @__env = this.Env;
            using(new global::net.sf.jni4net.jni.LocalFrame(@__env, 10)){
            return global::net.sf.jni4net.utils.Convertor.ArrayPrimJ2Cbyte(@__env, @__env.CallObjectMethodPtr(this, global::openomr.midi.MidiFileGenerator.j4n_writeToString3));
            }
        }
        
        new internal sealed class ContructionHelper : global::net.sf.jni4net.utils.IConstructionHelper {
            
            public global::net.sf.jni4net.jni.IJvmProxy CreateProxy(global::net.sf.jni4net.jni.JNIEnv @__env) {
                return new global::openomr.midi.MidiFileGenerator(@__env);
            }
        }
    }
    #endregion
}
